name: Nightly

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - "documentation/**"
      - ".github/**"
      - "crowdin.yml"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  continuous-integration:
    uses: ./.github/workflows/ci.yml

  update-tag:
    needs: continuous-integration
    runs-on: ubuntu-latest
    outputs:
      nightly-version: ${{ steps.gen-version.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - run: git fetch --tags --prune

      - name: Create or update 'nightly' tag (force overwrite)
        run: |
          git tag -f nightly
          git push origin --force --tags

      - name: Generate Version
        id: gen-version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const currentVersion = packageJson.version;

            const timestamp = new Date().toISOString().replace(/[-:T]/g, '').slice(0, 14);
            const nightlyVersion = `${currentVersion}+${timestamp}`;

            return nightlyVersion;

  build:
    needs:
      - update-tag
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-2025
            target: x86_64-pc-windows-msvc
          - platform: windows-2025
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
        with:
          rust-targets: ${{ matrix.target }}
          cache-key-prefix: rust-build-${{ matrix.target }}

      - name: Install frontend dependencies
        run: npm install

      - name: Install MSIX dependencies
        shell: pwsh
        run: |
          winget upgrade winget --accept-package-agreements --accept-source-agreements --disable-interactivity --force || Write-Output "Ignoring winget update failure"
          winget install --id Microsoft.DotNet.AspNetCore.8 --accept-package-agreements --accept-source-agreements --force
          winget install --id Microsoft.DotNet.DesktopRuntime.8 --accept-package-agreements --accept-source-agreements --force
          winget install --id MarcinOtorowski.MSIXHero --accept-package-agreements --accept-source-agreements --force

      - name: Set Version
        run: |
          npm run versionish -- --version ${{ needs.update-tag.outputs.nightly-version }}

      # If build fails we will be without a nightly build until the next push or workflow_dispatch
      - name: Build
        run: npx tauri build --ci --verbose --no-bundle --target ${{ matrix.target }}

      - name: Clean bundle folder from cache
        shell: pwsh
        run: |
          $bundlePath = "target/${{ matrix.target }}/release/bundle"
          if (Test-Path $bundlePath) {
            Remove-Item -Path $bundlePath -Recurse -Force
            Write-Output "Old bundles files deleted: $bundlePath"
          }

      - name: Bundle
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: npx tauri bundle --ci --verbose --target ${{ matrix.target }}

      - name: Bundle MSIX
        run: npx tsx scripts/bundle.msix.ts --target ${{ matrix.target }}

      - name: Upload to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-bundles-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/bundle

  merge-artifacts:
    needs:
      - update-tag
      - build
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload-merged.outputs.artifact-id }}
    steps:
      - name: Merge artifacts
        id: upload-merged
        uses: actions/upload-artifact/merge@v4
        with:
          name: build-bundles
          pattern: build-bundles-*
          delete-merged: true

  sign-and-upload:
    needs:
      - update-tag
      - merge-artifacts
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Clean existing assets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = 'nightly';

            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tagName,
            });

            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
            });

            core.info(`Found ${assets.length} existing assets to clean`);

            const deletions = assets.map(asset => {
              core.info(`Deleting ${asset.name}`);
              return github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id,
              });
            });

            await Promise.all(deletions);
            core.info('âœ… All existing assets cleaned');

      - name: Submit to SignPath
        uses: signpath/github-action-submit-signing-request@v1
        with:
          api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
          organization-id: 1a9e9b37-229a-4540-a639-137deebee4e1
          project-slug: seelen-ui
          signing-policy-slug: release-signing
          github-artifact-id: ${{ needs.merge-artifacts.outputs.artifact-id }}
          output-artifact-directory: bundles

      - name: File Tree
        run: |-
          tree bundles

      - name: Tauri Updater Signature
        env:
          SIGNING_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          SIGNING_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          npm install -g @tauri-apps/cli

          echo "Removing existing .sig files to regenerate with Tauri updater keys..."
          find ./bundles -name "*.sig" -type f -delete
          echo "Existing signatures removed"

          VERSION=${{ needs.update-tag.outputs.nightly-version }}
          PATH1="bundles/nsis/Seelen UI_${VERSION}_arm64-setup.exe"
          PATH2="bundles/nsis/Seelen UI_${VERSION}_x64-setup.exe"

          echo "Signing ${PATH1}..."
          tauri signer sign --verbose -k "$SIGNING_KEY" -p "$SIGNING_PASSWORD" "$PATH1"
          echo "Signing ${PATH2}..."
          tauri signer sign --verbose -k "$SIGNING_KEY" -p "$SIGNING_PASSWORD" "$PATH2"

      - name: Upload Signed Installers to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          name: Seelen UI Nightly
          prerelease: true
          files: bundles/**/*

  generate-update-file:
    needs:
      - update-tag
      - sign-and-upload
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get Release ID
        id: get-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: 'nightly',
            });
            return release.data.id;
      - uses: ./.github/actions/generate-update-manifest
        with:
          release-id: ${{ steps.get-release.outputs.result }}
          version: ${{ needs.update-tag.outputs.nightly-version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
